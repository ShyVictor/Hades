import pandas as pd
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_validate
import numpy as np

malware_data = pd.read_csv("malware_data.csv", sep="|")
legit_set = malware_data[0:41323].drop(["legitimate"], axis=1)
malware_set = malware_data[41323::].drop(["legitimate"], axis=1)

data_in = malware_data.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malware_data['legitimate'].values
extra_trees_classifier = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extra_trees_classifier, prefit=True)
data_in_new = select.transform(data_in)
print(data_in_new.shape, data_in.shape)


features = data_in_new.shape[1]
importances = extra_trees_classifier.feature_importances_
index = np.argsort(importances)[::-1]

for f in range(features):
    print("%d"%(f+1), malware_data.columns[2+index[f]], importances[index[f]])

from sklearn.ensemble import RandomForestClassifier

legit_train, legit_train_test, malware_train, malware_test = train_test_split(data_in_new, labels, test_size=0.2)
random_forest_classifier = RandomForestClassifier(n_estimators=50)
random_forest_classifier.fit(legit_train, malware_train)
print("The score of the algorithm: ", random_forest_classifier.score(legit_train_test, malware_test)*100)


def render_info():
    legit_set_samples, legit_set_features = legit_set.shape[0], legit_set.shape[1]
    malware_set_samples, malware_set_features = malware_set.shape[0], malware_set.shape[1]
    print('The shape of legit dataset is: %s samples, %s features'%(legit_set_samples, legit_set_features))
    print('The shape of the malware dataset is %s samples, %s features'%(malware_set_samples, malware_set_features))

render_info()

